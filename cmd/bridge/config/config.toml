[Eth]
    NetworkAddress = "http://127.0.0.1:8545" # a network address
    MultisigContractAddress = "3009d97FfeD62E57d444e552A9eDF9Ee6Bc8644c" # the eth address for the bridge contract
    SafeContractAddress = "A6504Cc508889bbDBd4B748aFf6EA6b5D0d2684c"
    PrivateKeyFile = "keys/ethereum.sk" # the path to the file containing the relayer eth private key
    GasLimit = 500000
    IntervalToWaitForTransferInSeconds = 600 #10 minutes
    MaxRetriesOnQuorumReached = 3
    [Eth.GasStation]
        Enabled = true
        URL = "https://ethgasstation.info/api/ethgasAPI.json?" # gas station URL. Suggestion to provide the api-key here
        PollingIntervalInSeconds = 60 # number of seconds between gas price polling
        RequestTimeInSeconds = 2 # maximum timeout (in seconds) for the gas price request
        MaximumAllowedGasPrice = 3000 # maximum value allowed for the fetched gas price value
        # GasPriceSelector available options: "fast", "fastest", "safeLow", "average"
        GasPriceSelector = "safeLow" # selector used to provide the gas price

[Elrond]
    NetworkAddress = "https://devnet-gateway.elrond.com" # the network address
    MultisigContractAddress = "erd1qqqqqqqqqqqqqpgqzyuaqg3dl7rqlkudrsnm5ek0j3a97qevd8sszj0glf" # the elrond address for the bridge contract
    PrivateKeyFile = "keys/elrond.pem" # the path to the pem file containing the relayer elrond wallet
    IntervalToResendTxsInSeconds = 60 # the time in seconds between nonce reads
    MaxRetriesOnQuorumReached = 3
    ProxyCacherExpirationSeconds = 600 # the caching time in seconds
    [Elrond.GasMap]
        Sign = 8000000
        ProposeTransferBase = 11000000
        ProposeTransferForEach = 3000000
        ProposeStatus = 30000000
        PerformActionBase = 25000000
        PerformActionForEach = 2000000

[P2P]
    Port = "10010"
    Seed = ""
    InitialPeerList = []
    ProtocolID = "/erd/relay/1.0.0"
    [AntifloodConfig]
        Enabled = true
        NumConcurrentResolverJobs = 50
        [Antiflood.FastReacting]
            IntervalInSeconds = 1
            ReservedPercent   = 20.0
            [Antiflood.FastReacting.PeerMaxInput]
                BaseMessagesPerInterval  = 10
                TotalSizePerInterval = 1048576 #1MB/s
                [Antiflood.FastReacting.PeerMaxInput.IncreaseFactor]
                    Threshold = 10 #if consensus size will exceed this value, then
                    Factor = 1.0   #increase the base value with [factor*consensus size]
            [Antiflood.FastReacting.BlackList]
                ThresholdNumMessagesPerInterval = 70
                ThresholdSizePerInterval = 2097154 #2MB/s
                NumFloodingRounds = 10
                PeerBanDurationInSeconds = 300

        [Antiflood.SlowReacting]
            IntervalInSeconds = 30
            ReservedPercent   = 20.0
            [Antiflood.SlowReacting.PeerMaxInput]
                BaseMessagesPerInterval = 400
                TotalSizePerInterval = 10485760 #10MB/interval
                [Antiflood.SlowReacting.PeerMaxInput.IncreaseFactor]
                    Threshold = 10 #if consensus size will exceed this value, then
                    Factor = 0.0   #increase the base value with [factor*consensus size]
            [Antiflood.SlowReacting.BlackList]
                ThresholdNumMessagesPerInterval = 800
                ThresholdSizePerInterval = 20971540 #20MB/interval
                NumFloodingRounds = 2
                PeerBanDurationInSeconds = 3600

        [Antiflood.OutOfSpecs]
            IntervalInSeconds = 1
            ReservedPercent   = 0.0
            [Antiflood.OutOfSpecs.PeerMaxInput]
                BaseMessagesPerInterval = 140
                TotalSizePerInterval = 4194304 #4MB/s
                [Antiflood.OutOfSpecs.PeerMaxInput.IncreaseFactor]
                    Threshold = 0 #if consensus size will exceed this value, then
                    Factor = 0.0     #increase the base value with [factor*consensus size]
            [Antiflood.OutOfSpecs.BlackList]
                ThresholdNumMessagesPerInterval = 200
                ThresholdSizePerInterval = 6291456 #6MB/s
                NumFloodingRounds = 2
                PeerBanDurationInSeconds = 3600

        [Antiflood.PeerMaxOutput]
            BaseMessagesPerInterval  = 5
            TotalSizePerInterval     = 524288 #512KB/s

        [Antiflood.Cache]
            Name = "Antiflood"
            Capacity = 7000
            Type = "LRU"
        [Antiflood.Topic]
            DefaultMaxMessagesPerSec = 300 # default number of messages per interval for a topic
            MaxMessages = [{ Topic = "EthToElrond_join", NumMessagesPerSec = 100 },
                           { Topic = "EthToElrond_sign", NumMessagesPerSec = 100 }]

[Relayer]
    [Relayer.Marshalizer]
        Type = "gogo protobuf"
        SizeCheckDelta = 10
    [Relayer.RoleProvider]
        UsePolling = true
        PollingIntervalInMillis = 60000 # 1 minute
    [Relayer.StatusMetricsStorage]
        [Relayer.StatusMetricsStorage.Cache]
            Name = "StatusMetricsStorage"
            Capacity = 1000
            Type = "LRU"
        [Relayer.StatusMetricsStorage.DB]
            FilePath = "StatusMetricsStorageDB"
            Type = "LvlDBSerial"
            BatchDelaySeconds = 2
            MaxBatchSize = 100
            MaxOpenFiles = 10

[StateMachine]
    [StateMachine.EthToElrond]
        StepDurationInMillis = 12000 #12 seconds
        IntervalForLeaderInSeconds = 120 #2 minutes

    [StateMachine.ElrondToEth]
        StepDurationInMillis = 12000
        IntervalForLeaderInSeconds = 720 #12 minutes

[Logs]
    LogFileLifeSpanInSec = 86400 # 24h

[Antiflood]
    Enabled = true
    [Antiflood.WebServer]
            # SimultaneousRequests represents the number of concurrent requests accepted by the web server
            # this is a global throttler that acts on all http connections regardless of the originating source
            SimultaneousRequests = 100
            # SameSourceRequests defines how many requests are allowed from the same source in the specified
            # time frame (SameSourceResetIntervalInSec)
            SameSourceRequests = 10000
            # SameSourceResetIntervalInSec time frame between counter reset, in seconds
            SameSourceResetIntervalInSec = 1
